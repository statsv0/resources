const colInfo=[{ref:"PG",description:"Previous group"},{ref:"BR",description:"Best ranking"},{ref:"BRR",description:"Best ranking rounds"},{ref:"AGE",description:""},{ref:"TR",description:"Total rounds"},{ref:"TW",description:"Total wins"},{ref:"TL",description:"Total loses"},{ref:"TNP",description:"Total not played"},{ref:"W2S",description:"Wins in 2 sets"},{ref:"W3S",description:"Wins in 3 sets"},{ref:"L2S",description:"Losses in 2 sets"},{ref:"L3S",description:"Losses in 3 sets"},{ref:"TT",description:"Total tie breaks"},{ref:"TTW",description:"Total tie break wins"},{ref:"TTL",description:"Total tie break losses"}];const cols=document.currentScript.getAttribute("columns");const info=cols.split(",").map(a=>colInfo.find(b=>b.ref===a));class StatsTemplate extends HTMLElement{constructor(){super();const{title:a,source:b,date:c}=this.attributes;this.title=a.value;this.source=b.value;this.date=c.value;this.columns=info}connectedCallback(){this.innerHTML=`
        <div class="header-container">
            <h1><img class="icon" alt="icon"
                src="https://raw.githubusercontent.com/statsv0/resources/refs/heads/main/favicon.png">Stats</h1>
            <h3>${this.title}</h3>
            <div>${this.columns.map(a=>{return a.description?`<span><b>${a.ref}</b> = ${a.description}</span> `:""}).join("")}
            </div>
            <br>
            <div>Source: ${this.source}</div>
            <div>Last update: ${this.date}</div>
        </div>
        <table cellspacing="0" cellpadding="0">
            <thead>
            <tr id="column-info"></tr>
            <thead>
            <tbody id="list"></tbody>
        </table>
    `}}customElements.define("stats-template",StatsTemplate);function prevGroup(a){const b=a.stats;const c=b[b.length-1];const d=b[b.length-2];return d&&c&&d.group-c.group}function getColorPrevGroup(a){return prevGroup(a)>=0?"green":"red"}function prevPosition(a){const b="round";const c=a.stats&&a.stats.reduce(function(a,c){return a[b]>c[b]?a:c},{})[b];const d=a&&a.stats||[];const e=d.find((a,b)=>a.round===c);const f=d.find((a,b)=>a.round===c-1);return e&&f&&f.position-e.position}function bestRanking(a,b){const c=[...a.stats];c.pop();return c.reduce(function(a,c){return a[b]<c[b]?a:c},{})[b]}function bestRankingWeeks(a){const b=bestRanking(a,"position");const c=[...a.stats];c.pop();const d=c.filter(a=>a.position===b);return d.length}function getAge(a=""){const b=new Date(a.split("/")[2],a.split("/")[1],a.split("/")[0]);var c=Date.now()-b.getTime();var d=new Date(c);return Math.abs(d.getUTCFullYear()-1970)}function getRankBorder(a){if(a<=10){return"top10"}if(a>10&&a<=20){return"top20"}if(a>20&&a<=50){return"top50"}if(a>50&&a<=100){return"100"}return""}function gT(a,c){return a.stats.reduce(function(d,a){return d+a[c]},0)}function printRow(a,b,c){const e=b[c];let f=document.createElement("tr");function d(a,b){f.setAttribute(a,b)}d("scope","row");const g=c+1;g<=10&&d("class","top10-row");g>10&&g<=20&&d("class","top20-row");g>20&&g<=50&&d("class","top50-row");g>50&&g<=100&&d("class","top100-row");g===11&&d("id","top20");g===21&&d("id","top50");g===51&&d("id","top100");const h={RANK:`<td class="rank ${getRankBorder(g)}">${g}</td>`,NAME:`<td class="name"><a href="javascript:void(0);">${e.clubName}</a></td>`,PG:`<td class="col white rank-icon ${getColorPrevGroup(e)}"><span>${prevGroup(e)>0?"+":""}${prevGroup(e)||"="}</span></td>`,BR:`<td class="col grey-back">${bestRanking(e,"position")||"NM"}</td>`,BRR:`<td class="col">${bestRankingWeeks(e)||""}</td>`,AGE:`<td class="col">${e.birth?getAge(e.birth):"-"}</td>`,TR:`<td class="col grey-back">${e.stats.length}</td>`,TW:`<td class="col">${gT(e,"wins")}</td>`,TL:`<td class="col">${gT(e,"losses")}</td>`,TNP:`<td class="col">${gT(e,"notPlayed")}</td>`,W2S:`<td class="col grey-back">${gT(e,"w2s")}</td>`,W3S:`<td class="col">${gT(e,"w3s")}</td>`,L2S:`<td class="col">${gT(e,"l2s")}</td>`,L3S:`<td class="col">${gT(e,"l3s")}</td>`,TT:`<td class="col grey-back">${gT(e,"tt")}</td>`,TTW:`<td class="col">${gT(e,"tw")}</td>`,TTL:`<td class="col">${gT(e,"tl")}</td>`};f.innerHTML=[{ref:"RANK"},{ref:"NAME"},...info].map(a=>h[a.ref]).join("");a.appendChild(f)}function mapper(a){let b=document.getElementById("list");for(y=0;y<a.length;++y){printRow(b,a,y)}}const thGen=(a,b,c,d)=>{const e=document.createElement(a);e.setAttribute(b,c);e.innerHTML=d;return e};const columnInfo=document.querySelector("#column-info");columnInfo.appendChild(thGen("th","class","white rank",""));columnInfo.appendChild(thGen("th","class","white name","Name"));info.map(a=>{columnInfo.appendChild(thGen("th","class","col",a.ref))}).join("");const club=document.currentScript.getAttribute("club-url");Promise.all([new Promise((a,b)=>{return fetch(club).then(b=>a(b.json()))})]).then(a=>{mapper(a[0])});
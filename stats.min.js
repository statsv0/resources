function prevGroup(a){const b=a.stats;const c=b[b.length-1];const d=b[b.length-2];return d&&c&&d.group-c.group}function getColorPrevGroup(a){return prevGroup(a)>=0?"green":"red"}function prevPosition(a){const b="round";const c=a.stats&&a.stats.reduce(function(a,c){return a[b]>c[b]?a:c},{})[b];const d=a&&a.stats||[];const e=d.find((a,b)=>a.round===c);const f=d.find((a,b)=>a.round===c-1);return e&&f&&f.position-e.position}function bestRanking(a,b){const c=[...a.stats];c.pop();return c.reduce(function(a,c){return a[b]<c[b]?a:c},{})[b]}function bestRankingWeeks(a){const b=bestRanking(a,"position");const c=[...a.stats];c.pop();const d=c.filter(a=>a.position===b);return d.length}function getAge(a=""){const b=new Date(a.split("/")[2],a.split("/")[1],a.split("/")[0]);var c=Date.now()-b.getTime();var d=new Date(c);return Math.abs(d.getUTCFullYear()-1970)}function getRankBorder(a){if(c(a).top10){return"top10"}if(c(a).top20){return"top20"}if(c(a).top50){return"top50"}if(c(a).top100){return"100"}return""}function gT(a,c){return a.stats.reduce(function(d,a){return d+a[c]},0)}function c(a){return{top10:a<=10,top20:a>10&&a<=20,top50:a>20&&a<=50,top100:a>50&&a<=100}}function printRow(a,b,d){const f=b[d];let g=document.createElement("tr");function e(a,b){g.setAttribute(a,b)}e("scope","row");const h=d+1;c(h).top10&&e("class","top10-row");c(h).top20&&e("class","top20-row");c(h).top50&&e("class","top50-row");c(h).top100&&e("class","top100-row");h===11&&e("id","top20");h===21&&e("id","top50");h===51&&e("id","top100");g.innerHTML=[...info].map(a=>a.tmpl&&a.tmpl(f,h)).join("");a.appendChild(g)}function mapper(a){let b=document.getElementById("list");for(y=0;y<a.length;++y){printRow(b,a,y)}}const thGen=(a,b,c,d)=>{const e=document.createElement(a);e.setAttribute(b,c);e.innerHTML=d;return e};const colInfo=[{ref:"RANK",tmpl:(a,b)=>`<td class="rank ${getRankBorder(b)}">${b}</td>`},{ref:"NAME",tmpl:a=>`<td class="name">${a.clubName}</td>`},{ref:"PG",description:"Previous group",tmpl:a=>`<td class="col white rank-icon ${getColorPrevGroup(a)}"><span>${prevGroup(a)>0?"+":""}${prevGroup(a)||"="}</span></td>`},{ref:"BR",description:"Best ranking",tmpl:a=>`<td class="col grey-back">${bestRanking(a,"position")||"NM"}</td>`},{ref:"BRR",description:"Best ranking rounds",tmpl:a=>`<td class="col">${bestRankingWeeks(a)||""}</td>`},{ref:"AGE",tmpl:a=>`<td class="col">${a.birth?getAge(a.birth):"-"}</td>`},{ref:"TR",description:"Total rounds",tmpl:a=>`<td class="col grey-back">${a.stats.length}</td>`},{ref:"TW",description:"Total wins",tmpl:a=>`<td class="col">${gT(a,"wins")}</td>`},{ref:"TL",description:"Total loses",tmpl:a=>`<td class="col">${gT(a,"losses")}</td>`},{ref:"TNP",description:"Total not played",tmpl:a=>`<td class="col">${gT(a,"notPlayed")}</td>`},{ref:"W2S",description:"Wins in 2 sets",tmpl:a=>`<td class="col grey-back">${gT(a,"w2s")}</td>`},{ref:"W3S",description:"Wins in 3 sets",tmpl:a=>`<td class="col">${gT(a,"w3s")}</td>`},{ref:"L2S",description:"Losses in 2 sets",tmpl:a=>`<td class="col">${gT(a,"l2s")}</td>`},{ref:"L3S",description:"Losses in 3 sets",tmpl:a=>`<td class="col">${gT(a,"l3s")}</td>`},{ref:"TT",description:"Total tie breaks",tmpl:a=>`<td class="col grey-back">${gT(a,"tt")}</td>`},{ref:"TTW",description:"Total tie break wins",tmpl:a=>`<td class="col">${gT(a,"tw")}</td>`},{ref:"TTL",description:"Total tie break losses",tmpl:a=>`<td class="col">${gT(a,"tl")}</td>`}];const cols=document.currentScript.getAttribute("columns");const info=["RANK","NAME",...cols.split(",")].map(a=>colInfo.find(b=>b.ref===a));class StatsTemplate extends HTMLElement{constructor(){super();const{title:a,source:b,date:c}=this.attributes;this.title=a.value;this.source=b.value;this.date=c.value;this.columns=info}connectedCallback(){this.innerHTML=`
        <div class="header-container">
            <h1>
              <img class="icon" alt="icon" src="https://raw.githubusercontent.com/statsv0/resources/refs/heads/main/favicon.png">
              Stats
            </h1>
            <h3>${this.title}</h3>
            <div>
              ${this.columns.map(a=>{return a.description?`<span><b>${a.ref}</b> = ${a.description}</span> `:""}).join("")}
            </div>
            <br>
            <div>Source: ${this.source}</div>
            <div>Last update: ${this.date}</div>
        </div>
        <table cellspacing="0" cellpadding="0">
            <thead><tr id="column-info"></tr></thead>
            <tbody id="list"></tbody>
        </table>
    `}}customElements.define("stats-template",StatsTemplate);const columnInfo=document.querySelector("#column-info");info.map((a,b)=>{if(b===0){columnInfo.appendChild(thGen("th","class","white rank",""))}else if(b===1){columnInfo.appendChild(thGen("th","class","white name","Name"))}else{columnInfo.appendChild(thGen("th","class","col",a.ref))}}).join("");const club=document.currentScript.getAttribute("club-url");Promise.all([new Promise((a,b)=>{return fetch(club).then(b=>a(b.json()))})]).then(a=>{mapper(a[0])});